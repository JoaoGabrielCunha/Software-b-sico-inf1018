The Objective of This Work

The objective of this work is to develop, in C, a function called compilaLinB that implements a small code generator (a "micro-compiler") for a basic programming language named LinB.

The compilaLinB function should read a text file containing the source code of a function written in LinB, generate the machine code corresponding to the translation of the function contained in the file in the area passed as the second parameter, and return a pointer to the generated function.

The indication is that the main function that calls compilaLinB should declare a local variable as an array of unsigned char of appropriate size and pass it as the second parameter.

The Basic Language

Functions in the LinB language contain assignments, arithmetic operations, jump instructions, and return instructions.

An assignment has the form:



varp '<=' expr 
where varp is a local variable or a parameter, and expr is an arithmetic operation.

An arithmetic operation has the form:


varpc op varpc 
where varpc is a local variable, a parameter, or an integer constant, and op is one of the operators: + - *.

The jump instruction has the form:

arduino
Copiar código
'if' varp num 
where varp is a local variable or a parameter, and num is the line number in the source code to which control should jump if the value of varp is not zero.

Finally, the return instruction has the form:

arduino
Copiar código
'ret'
In this case, the function should return, and its return value is the value of the local variable v1.

In the LinB language, local variables are of the form vi, with the index i used to identify the variable (e.g., v1, v2, etc.). The language allows the use of a maximum of 4 local variables.

Similarly, parameters are denoted by pi, and a maximum of 2 parameters can be used (p1 and p2).

Constants are written in the form $i, where i is an integer value, with an optional sign. For example, $10 represents the value 10, and $-10 represents the value -10.

For your reference, the syntax of the LinB language can be formally defined as below using BNF notation (for those interested, here is a more extensive reference on BNF).

Note that the strings between ' ' are terminal symbols of the language: the characters ' ' do not appear in the commands!

go
Copiar código
func ::= cmd '\n' | cmd '\n' func
cmd  ::= att | desvio | ret
att  ::= varp '<=' expr
expr ::= varpc op varpc
varp ::= 'v' num | 'p' num
varpc ::= varp | '$' snum
op   ::= '+' | '-' | '*'
ret  ::= 'ret'
desvio ::= 'if' varp num
num  ::= digit | digit num
snum ::= [-] num
digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
Some Examples

Below are some examples of LinB functions. Note that comments are not part of the language! They are included in the examples below only to facilitate your understanding.

The example below implements a function f(x) = x + 1:


v1 <= p1 + $1          // 1: i = x + 1
ret                   // 2: returns i


The next example implements a function f(x,y) = (x+y) * (x-y):

v1 <= p1 + p2          // 1: i = x + y
p1 <= p1 - p2          // 2: x = x - y
v1 <= v1 * p1          // 3: i = i * x
ret                   // 4: returns i


The next example is a factorial function fact(n):

v1 <= $0 + $1          // 1: f = 1
if p1 4               // 2: if (n != 0) jump to line 4
ret                   // 3: returns f
v1 <= v1 * p1          // 4: f = f * n
p1 <= p1 - $1          // 5: n = n - 1
if p1 4               // 6: if (n != 0) jump to line 4
ret                   // 7: returns f


Finally, a function squad(x) that calculates the sum of squares from 1 to x:


v1 <= $0 + $0          // 1: sum = 0
v2 <= $1 + $0          // 2: i = 1
p1 <= p1 + $1          // 3: x = x + 1
v3 <= p1 - v2          // 4: aux = x - i  (will be zero if x == i)
if v3 7               // 5: if (aux != 0) jump to line 7
ret                   // 6: returns sum
v3 <= v2 * v2          // 7: aux = i * i
v1 <= v1 + v3          // 8: sum = sum + aux
v2 <= v2 + $1          // 9: i = i + 1
if v2 4      



What to Do

You should develop in C a function called compilaLinB, which reads an input file containing the source code of a function in the LinB language, generates the corresponding machine code in the vector passed as the second parameter, and returns a pointer to the generated function. The input file will have a maximum of 50 lines, with one LinB command per line.     